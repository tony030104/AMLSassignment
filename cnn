from keras.models import Sequential
from keras.preprocessing.image import ImageDataGenerator
from keras.layers import Dense, Activation, Flatten, Dropout, BatchNormalization
from keras.layers import Conv2D, MaxPooling2D
from keras import regularizers, optimizers
import pandas as pd
import numpy as np
import os

basedir = 'C:/Users/user/PycharmProjects/Assignment/venv'

traindf=pd.read_csv(os.path.join(basedir,'attribute_list.csv'))
testdf=pd.read_csv(os.path.join(basedir,'attribute_list.csv'))


# Fitting the CNN to the images
datagen=ImageDataGenerator(rescale=1./255.,validation_split=0.25)

train_generator=datagen.flow_from_dataframe(
dataframe=traindf,
directory=os.path.join(basedir,'training_set'),
x_col='5000',
y_col='Unnamed: 2',
has_ext=False,
subset='training',
batch_size=32,
seed=42,
shuffle=True,
class_mode='categorical',
target_size=(32,32))

valid_generator=datagen.flow_from_dataframe(
dataframe=traindf,
directory=os.path.join(basedir,'training_set'),
x_col='5000',
y_col='Unnamed: 2',
has_ext=False,
subset='validation',
batch_size=32,
seed=42,
shuffle=True,
class_mode='categorical',
target_size=(32,32))

test_datagen=ImageDataGenerator(rescale=1./255.)

test_generator=test_datagen.flow_from_dataframe(
dataframe=testdf,
directory='testing_set',
x_col='5000',
y_col=None,
has_ext=False,
batch_size=32,
seed=42,
shuffle=False,
class_mode=None,
target_size=(32,32))

# Initialising
classifier = Sequential()

# conv. layer
classifier.add(Conv2D(32, (3, 3), padding='same',
                 input_shape=(32,32,3)))
classifier.add(Activation('relu'))
classifier.add(Conv2D(32, (3, 3)))
classifier.add(Activation('relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))
classifier.add(Dropout(0.25))
classifier.add(Conv2D(64, (3, 3), padding='same'))
classifier.add(Activation('relu'))
classifier.add(Conv2D(64, (3, 3)))
classifier.add(Activation('relu'))
classifier.add(MaxPooling2D(pool_size=(2, 2)))
classifier.add(Dropout(0.25))

# Flattening
classifier.add(Flatten())

# Full connection
classifier.add(Dense(512))
classifier.add(Activation('relu'))
classifier.add(Dropout(0.5))
classifier.add(Dense(3, activation='softmax'))

# Compiling the CNN
classifier.compile(optimizers.rmsprop(lr=0.0001, decay=1e-6),
                   loss="categorical_crossentropy",
                   metrics=["accuracy"])

# Fitting the Model
STEP_SIZE_TRAIN=train_generator.n//train_generator.batch_size
STEP_SIZE_VALID=valid_generator.n//valid_generator.batch_size
classifier.fit_generator(generator=train_generator,
                    steps_per_epoch=STEP_SIZE_TRAIN,
                    validation_data=valid_generator,
                    validation_steps=STEP_SIZE_VALID,
                    epochs=1
)

# Evaluate the model
classifier.evaluate_generator(generator=valid_generator,steps=len(valid_generator))

# Predict the output
test_generator.reset()
pred=classifier.predict_generator(test_generator,steps=len(test_generator),verbose=1)

predicted_class_indices=np.argmax(pred,axis=1)

labels = (train_generator.class_indices)
labels = dict((v,k) for k,v in labels.items())
predictions = [labels[k] for k in predicted_class_indices]

filenames=test_generator.filenames
results=pd.DataFrame({"Filename":filenames,
                      "Predictions":predictions})
results.to_csv("results.csv",index=False)
